<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:java="http://www.mulesoft.org/schema/mule/java" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd http://www.mulesoft.org/schema/mule/munit-tools http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd 
http://www.mulesoft.org/schema/mule/java http://www.mulesoft.org/schema/mule/java/current/mule-java.xsd">

    <munit:config name="data-aggregation-demo-api-apikit-test.xml" />
    
	<java:config name="Java_Config" doc:name="Java Config" doc:id="61409e1f-1d59-4b3d-94ce-4dec68fcb41b" />
	
	<http:request-config name="HTTP_Request_Configuration" doc:name="HTTP Request configuration" doc:id="c4b9fb9d-ffda-4c7f-ba64-f810d1e5f8d0" basePath="/da-api">
		<http:request-connection host="localhost" port="${http.port}" />
	</http:request-config>
	<munit:test name="test-putsource-201" description="Testing PUT /admin/sources for happy path">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="data-aggregation-demo-api-main" />
            <munit:enable-flow-source value="put:\admin\sources:application\json:data-aggregation-demo-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior>
            <set-payload value="#[MunitTools::getResourceAsString('scaffolder/request/put_admin_sources_application_json.json')]" />
			<munit-tools:mock-when doc:name="Mock Check For Existing Sources with Same Name" doc:id="a4411163-3014-4a93-a734-b1acca4f8cbe" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute attributeName="doc:name" whereValue="Look for Sources With Same Name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[[]]" mediaType="application/java" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock DB Request for Max ID" doc:id="511237c1-6b5f-4480-b2ab-799005777196" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute attributeName="doc:name" whereValue="Get Max Existing ID" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[[[2]]]" mediaType="application/java" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
        </munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="PUT" path="/admin/sources">
                <http:headers><![CDATA[#[output applicaton/java
---
{
	"Accept" : "application/json",
	"Content-Type" : "application/json"
}]]]></http:headers>
				<http:response-validator >
					<http:success-status-code-validator values="200,201" />
				</http:response-validator>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(201)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 201" />
            <munit-tools:assert-that expression="#[output application/java ---write(payload, 'application/json') as String]" is="#[MunitTools::equalTo(MunitTools::getResourceAsString('scaffolder/response/put_200_admin_sources_application_json.json'))]" message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" />
        </munit:validation>
    </munit:test>
    
    <munit:test name="test-putsource-400-duplicatename" description="Testing PUT /admin/sources when a duplicate name already exists">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="data-aggregation-demo-api-main" />
            <munit:enable-flow-source value="put:\admin\sources:application\json:data-aggregation-demo-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior>
            <set-payload value="#[MunitTools::getResourceAsString('scaffolder/request/put_admin_sources_application_json.json')]" />
			<java:new doc:name="Create Helper Class" class="com.deloitte.helperclasses.JsonHelpers" constructor="JsonHelpers()" target="helperClass"/>
			<munit-tools:mock-when doc:name="Mock Check For Existing Sources with Same Name" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute attributeName="doc:name" whereValue="Look for Sources With Same Name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[Java::invoke('com.deloitte.helperclasses.JsonHelpers', 'getArrayFromJson(String)', vars.helperClass, {arg0: MunitTools::getResourceAsString('scaffolder/mock/get-single-source.json')})]" mediaType="application/java" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
        </munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="PUT" path="/admin/sources">
                <http:headers><![CDATA[#[output applicaton/java
---
{
	"Accept" : "application/json",
	"Content-Type" : "application/json"
}]]]></http:headers>
				<http:response-validator >
					<http:success-status-code-validator values="200,400" />
				</http:response-validator>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(400)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 400" />
            <munit-tools:assert-that expression="#[output application/java ---write(payload, 'application/json') as String]" is="#[MunitTools::equalTo(MunitTools::getResourceAsString('scaffolder/response/put_400_admin_sources_application_json.json'))]" message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" />
        </munit:validation>
    </munit:test>
    
    <munit:test name="test-deletesource-200" description="Testing DEL /admin/sources/ID for happy path">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="data-aggregation-demo-api-main" />
            <munit:enable-flow-source value="delete:\admin\sources\(id):application\json:data-aggregation-demo-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior >
			<set-payload value="#[MunitTools::getResourceAsString('scaffolder/request/del_admin_sources_id.json')]" doc:name="Set Payload" doc:id="26808c36-fadb-4222-b256-64159efe0a7f" mimeType="application/json"/>
			<java:new doc:name="Create Helper Class" class="com.deloitte.helperclasses.JsonHelpers" constructor="JsonHelpers()" target="helperClass"/>
			<munit-tools:mock-when doc:name="Mock DB Select" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute attributeName="doc:name" whereValue="Get Selected Source from DB" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[Java::invoke('com.deloitte.helperclasses.JsonHelpers', 'getArrayFromJson(String)', vars.helperClass, {arg0: MunitTools::getResourceAsString('scaffolder/mock/get-single-source.json')})]" mediaType="application/java" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock DB Delete" doc:id="b9159c63-c9ea-4cde-a6c3-589477bffca8" processor="db:delete">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute attributeName="doc:name" whereValue="Delete Source" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[1]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="DELETE" path="/admin/sources/1">
				<http:headers><![CDATA[#[output applicaton/java
---
{
	"Accept" : "application/json"
}]]]></http:headers>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 200" />
            <munit-tools:assert-that expression="#[output application/java ---write(payload, 'application/json') as String]" is="#[MunitTools::equalTo(MunitTools::getResourceAsString('scaffolder/response/delete_200_admin_sources_{id}_application_json.json'))]" message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" />
        </munit:validation>
    </munit:test>
    
    <munit:test name="test-deletesource-invalidids" description="Testing that DEL is rejected when IDs don't match" doc:id="9b83cbba-b75d-4cc2-9362-95e4d130b396">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="data-aggregation-demo-api-main" />
            <munit:enable-flow-source value="delete:\admin\sources\(id):application\json:data-aggregation-demo-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior >
			<set-payload value="#[MunitTools::getResourceAsString('scaffolder/request/del_admin_sources_id.json')]" doc:name="Set Payload" mimeType="application/json"/>
			<java:new doc:name="Create Helper Class" class="com.deloitte.helperclasses.JsonHelpers" constructor="JsonHelpers()" target="helperClass"/>
			<munit-tools:mock-when doc:name="Mock DB Select" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute attributeName="doc:name" whereValue="Get Selected Source from DB" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[Java::invoke('com.deloitte.helperclasses.JsonHelpers', 'getArrayFromJson(String)', vars.helperClass, {arg0: MunitTools::getResourceAsString('scaffolder/mock/get-single-source.json')})]" mediaType="application/java" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock DB Delete" processor="db:delete">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute attributeName="doc:name" whereValue="Delete Source" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[1]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="DELETE" path="/admin/sources/2">
				<http:headers><![CDATA[#[output applicaton/java
---
{
	"Accept" : "application/json"
}]]]></http:headers>
				<http:response-validator >
					<http:success-status-code-validator values="200,400" />
				</http:response-validator>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(400)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 400" />
            <munit-tools:assert-that expression="#[output application/java ---write(payload, 'application/json') as String]" is="#[MunitTools::equalTo(MunitTools::getResourceAsString('scaffolder/response/delete_400_admin_sources_id_invalidid.json'))]" message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" />
        </munit:validation>
	</munit:test>
	
	<munit:test name="test-deletesource-invalidpayloaddata" description="Testing that DEL is rejected when payload data doesn't match" doc:id="12574537-eaf4-4743-9f63-a2d99fcdf179">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="data-aggregation-demo-api-main" />
            <munit:enable-flow-source value="delete:\admin\sources\(id):application\json:data-aggregation-demo-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior >
			<set-payload value="#[MunitTools::getResourceAsString('scaffolder/request/del_admin_sources_baddata.json')]" doc:name="Set Payload" mimeType="application/json"/>
			<java:new doc:name="Create Helper Class" class="com.deloitte.helperclasses.JsonHelpers" constructor="JsonHelpers()" target="helperClass"/>
			<munit-tools:mock-when doc:name="Mock DB Select" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute attributeName="doc:name" whereValue="Get Selected Source from DB" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[Java::invoke('com.deloitte.helperclasses.JsonHelpers', 'getArrayFromJson(String)', vars.helperClass, {arg0: MunitTools::getResourceAsString('scaffolder/mock/get-single-source.json')})]" mediaType="application/java" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock DB Delete" processor="db:delete">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute attributeName="doc:name" whereValue="Delete Source" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[1]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="DELETE" path="/admin/sources/1">
				<http:headers><![CDATA[#[output applicaton/java
---
{
	"Accept" : "application/json"
}]]]></http:headers>
				<http:response-validator >
					<http:success-status-code-validator values="200,400" />
				</http:response-validator>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(400)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 400" />
            <munit-tools:assert-that expression="#[output application/java ---write(payload, 'application/json') as String]" is="#[MunitTools::equalTo(MunitTools::getResourceAsString('scaffolder/response/delete_400_admin_sources_id_invaliddata.json'))]" message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" />
        </munit:validation>
	</munit:test>
	
	<munit:test name="test-cleanDB" description="Testing the cleanDB API">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="data-aggregation-demo-api-main" />
            <munit:enable-flow-source value="get:\admin\cleanDB:data-aggregation-demo-api-config" />
        </munit:enable-flow-sources>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/admin/cleanDB">
                <http:headers>#[{"Accept":"application/json"}]</http:headers>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 200" />
            <munit-tools:assert-that expression="#[output application/java ---write(payload, 'application/json') as String]" is="#[MunitTools::equalTo(MunitTools::getResourceAsString('scaffolder/response/get_200_admin_cleandb_application_json.json'))]" message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" />
        </munit:validation>
    </munit:test>
    
    <munit:test name="test-sourcesapi-multiple" description="Testing /admin/sources with multiple results">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="data-aggregation-demo-api-main" />
            <munit:enable-flow-source value="get:\admin\sources:data-aggregation-demo-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior >
			<java:new doc:name="Create Helper Class" doc:id="0ff43f0f-d33e-4acb-8084-e30773d24020" class="com.deloitte.helperclasses.JsonHelpers" constructor="JsonHelpers()" target="helperClass"/>
			<munit-tools:mock-when doc:name="Mock Database Call" doc:id="4846a34f-c050-4650-b34c-16f658c17f30" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute attributeName="doc:name" whereValue="Get Sources" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[Java::invoke('com.deloitte.helperclasses.JsonHelpers', 'getArrayFromJson(String)', vars.helperClass, {arg0: MunitTools::getResourceAsString('scaffolder/mock/get-multiple-sources.json')})]" mediaType="application/java" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/admin/sources">
                <http:headers>#[{"Accept":"application/json"}]</http:headers>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 200" />
            <munit-tools:assert-that expression="#[output application/java ---write(payload, 'application/json') as String]" is="#[MunitTools::equalTo(MunitTools::getResourceAsString('scaffolder/response/get_200_admin_sources_multiple.json'))]" message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" />
        </munit:validation>
    </munit:test>
    
    <munit:test name="test-sourcesapi-single" description="Testing /admin/sources with a single result">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="data-aggregation-demo-api-main" />
            <munit:enable-flow-source value="get:\admin\sources:data-aggregation-demo-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior >
			<java:new doc:name="Create Helper Class" class="com.deloitte.helperclasses.JsonHelpers" constructor="JsonHelpers()" target="helperClass"/>
			<munit-tools:mock-when doc:name="Mock Database Call" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute attributeName="doc:name" whereValue="Get Sources" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[Java::invoke('com.deloitte.helperclasses.JsonHelpers', 'getArrayFromJson(String)', vars.helperClass, {arg0: MunitTools::getResourceAsString('scaffolder/mock/get-single-source.json')})]" mediaType="application/java" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/admin/sources">
                <http:headers>#[{"Accept":"application/json"}]</http:headers>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 200" />
            <munit-tools:assert-that expression="#[output application/java ---write(payload, 'application/json') as String]" is="#[MunitTools::equalTo(MunitTools::getResourceAsString('scaffolder/response/get_200_admin_source_single.json'))]" message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" />
        </munit:validation>
    </munit:test>
    
    <munit:test name="test-sourcesapi-none" description="Testing /admin/sources with no results">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="data-aggregation-demo-api-main" />
            <munit:enable-flow-source value="get:\admin\sources:data-aggregation-demo-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior >
			<java:new doc:name="Create Helper Class" class="com.deloitte.helperclasses.JsonHelpers" constructor="JsonHelpers()" target="helperClass"/>
			<munit-tools:mock-when doc:name="Mock Database Call" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute attributeName="doc:name" whereValue="Get Sources" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[Java::invoke('com.deloitte.helperclasses.JsonHelpers', 'getArrayFromJson(String)', vars.helperClass, {arg0: MunitTools::getResourceAsString('scaffolder/mock/get-no-sources.json')})]" mediaType="application/java" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/admin/sources">
                <http:headers><![CDATA[#[output applicaton/java
---
{
	"Accept" : "application/json"
}]]]></http:headers>
				<http:response-validator >
					<http:success-status-code-validator values="200,404" />
				</http:response-validator>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(404)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 404" />
            <munit-tools:assert-that expression="#[output application/java ---write(payload, 'application/json') as String]" is="#[MunitTools::equalTo(MunitTools::getResourceAsString('scaffolder/response/get_404_admin_sources.json'))]" message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" />
        </munit:validation>
    </munit:test>
    
    <munit:test name="test-source-id-200" description="Testing /admin/sources/ID for happy path">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="data-aggregation-demo-api-main" />
            <munit:enable-flow-source value="get:\admin\sources\(id):data-aggregation-demo-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior >
			<java:new doc:name="Create Helper Class" class="com.deloitte.helperclasses.JsonHelpers" constructor="JsonHelpers()" target="helperClass"/>
			<munit-tools:mock-when doc:name="Mock Database Call" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute attributeName="doc:name" whereValue="Get Selected Source from DB" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[Java::invoke('com.deloitte.helperclasses.JsonHelpers', 'getArrayFromJson(String)', vars.helperClass, {arg0: MunitTools::getResourceAsString('scaffolder/mock/get-single-source-by-id.json')})]" mediaType="application/java" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/admin/sources/1">
                <http:headers><![CDATA[#[output applicaton/java
---
{
	"Accept" : "application/json"
}]]]></http:headers>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 200" />
            <munit-tools:assert-that expression="#[output application/java ---write(payload, 'application/json') as String]" is="#[MunitTools::equalTo(MunitTools::getResourceAsString('scaffolder/response/get_200_admin_source_{ID}.json'))]" message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" />
        </munit:validation>
    </munit:test>
    
    <munit:test name="test-source-id-404" description="Testing /admin/sources/ID with no results returned">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="data-aggregation-demo-api-main" />
            <munit:enable-flow-source value="get:\admin\sources\(id):data-aggregation-demo-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior >
			<java:new doc:name="Create Helper Class" class="com.deloitte.helperclasses.JsonHelpers" constructor="JsonHelpers()" target="helperClass"/>
			<munit-tools:mock-when doc:name="Mock Database Call" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute attributeName="doc:name" whereValue="Get Selected Source from DB" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[Java::invoke('com.deloitte.helperclasses.JsonHelpers', 'getArrayFromJson(String)', vars.helperClass, {arg0: MunitTools::getResourceAsString('scaffolder/mock/get-no-sources.json')})]" mediaType="application/java" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/admin/sources/1">
                <http:headers><![CDATA[#[output applicaton/java
---
{
	"Accept" : "application/json"
}]]]></http:headers>
                <http:response-validator>
                    <http:success-status-code-validator values="200,404" />
                </http:response-validator>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(404)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 404" />
            <munit-tools:assert-that expression="#[output application/java ---write(payload, 'application/json') as String]" is="#[MunitTools::equalTo(MunitTools::getResourceAsString('scaffolder/response/get_404_admin_sources.json'))]" message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" />
        </munit:validation>
    </munit:test>
    
    <munit:test name="test-resultsapi-200-full" description="Testing /results with multiple results">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="data-aggregation-demo-api-main" />
            <munit:enable-flow-source value="get:\results\(searchTerm):data-aggregation-demo-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior >
			<java:new doc:name="Create Helper Class" class="com.deloitte.helperclasses.JsonHelpers" constructor="JsonHelpers()" target="helperClass"/>
			<munit-tools:mock-when doc:name="Mock Database Call for Sources" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute attributeName="doc:name" whereValue="Get Sources" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[Java::invoke('com.deloitte.helperclasses.JsonHelpers', 'getArrayFromJson(String)', vars.helperClass, {arg0: MunitTools::getResourceAsString('scaffolder/mock/get-multiple-sources.json')})]" mediaType="application/java" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock HTTP Call for Source API" doc:id="900fd8d4-a74d-4eba-a1ec-bf88a004b400" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute attributeName="doc:name" whereValue="Get Result from Source API" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload mediaType="application/json" value="#[MunitTools::getResourceAsString('scaffolder/mock/single-result-from-sourceapi.json')]"/>
					<munit-tools:attributes value="#['statusCode':200]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/results/searchTerm">
                <http:headers><![CDATA[#[output applicaton/java
---
{
	"Accept" : "application/json"
}]]]></http:headers>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 200" />
            <munit-tools:assert-that expression="#[output application/java ---write(payload, 'application/json') as String]" is="#[MunitTools::equalTo(MunitTools::getResourceAsString('scaffolder/response/get_200_results_{searchterm}_application_json.json'))]" message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" />
        </munit:validation>
    </munit:test>
    
	<munit:test name="test-resultsapi-urlwithnoslash" description="Testing /results API when one of the URLs from the DB doesn't end with a slash" doc:id="d63d439f-bd9b-4607-9752-b28765b79736">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="data-aggregation-demo-api-main" />
            <munit:enable-flow-source value="get:\results\(searchTerm):data-aggregation-demo-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior >
			<java:new doc:name="Create Helper Class" class="com.deloitte.helperclasses.JsonHelpers" constructor="JsonHelpers()" target="helperClass"/>
			<munit-tools:mock-when doc:name="Mock Database Call for Sources" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute attributeName="doc:name" whereValue="Get Sources" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[Java::invoke('com.deloitte.helperclasses.JsonHelpers', 'getArrayFromJson(String)', vars.helperClass, {arg0: MunitTools::getResourceAsString('scaffolder/mock/get-single-source-noslashes.json')})]" mediaType="application/java" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock HTTP Call for Source API" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute attributeName="doc:name" whereValue="Get Result from Source API" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload mediaType="application/json" value="#[MunitTools::getResourceAsString('scaffolder/mock/single-result-from-sourceapi.json')]"/>
					<munit-tools:attributes value="#['statusCode':200]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:spy doc:name="Spy" doc:id="649da024-5a8d-4005-acb4-5a6b21ceba0e" processor="ee:transform">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute attributeName="doc:name" whereValue="Build Full URL" />
				</munit-tools:with-attributes>
				<munit-tools:before-call >
					<munit-tools:assert-that doc:name="Assert that" doc:id="b675355c-8790-4aad-ab8b-1a0f68899960" expression="#[vars.fullURL]" is="#[MunitTools::nullValue()]" message="Error in spying on fullURL var"/>
				</munit-tools:before-call>
				<munit-tools:after-call >
					<munit-tools:assert-that doc:name="Assert that URL is correctly created" doc:id="1a355c23-25c1-4f94-b7b2-44f1f4511ecf" expression="#[vars.fullURL]" is="#[MunitTools::equalTo('http://source1.com/searchTerm')]" message="URL improperly created"/>
				</munit-tools:after-call>
			</munit-tools:spy>
		</munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/results/searchTerm">
                <http:headers><![CDATA[#[output applicaton/java
---
{
	"Accept" : "application/json"
}]]]></http:headers>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 200" />
            <munit-tools:assert-that expression="#[output application/java ---write(payload, 'application/json') as String]" is="#[MunitTools::equalTo(MunitTools::getResourceAsString('scaffolder/response/get_200_singleresult_{searchterm}.json'))]" message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" />
        </munit:validation>
	</munit:test>
	
	<munit:test name="test-resultsapi-200-404fromsource" description="Testing /results API when one of the sources returns a 404" doc:id="2e413c18-300f-4055-ab2e-bf828165117f">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="data-aggregation-demo-api-main" />
            <munit:enable-flow-source value="get:\results\(searchTerm):data-aggregation-demo-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior >
			<java:new doc:name="Create Helper Class" class="com.deloitte.helperclasses.JsonHelpers" constructor="JsonHelpers()" target="helperClass"/>
			<munit-tools:mock-when doc:name="Mock Database Call for Sources" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute attributeName="doc:name" whereValue="Get Sources" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[Java::invoke('com.deloitte.helperclasses.JsonHelpers', 'getArrayFromJson(String)', vars.helperClass, {arg0: MunitTools::getResourceAsString('scaffolder/mock/get-single-source.json')})]" mediaType="application/java" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/results/searchTerm">
                <http:headers><![CDATA[#[output applicaton/java
---
{
	"Accept" : "application/json"
}]]]></http:headers>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 200" />
            <munit-tools:assert-that expression="#[output application/java ---write(payload, 'application/json') as String]" is="#[MunitTools::equalTo(MunitTools::getResourceAsString('scaffolder/response/get_200_noresult_{searchterm}.json'))]" message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" />
        </munit:validation>
	</munit:test>
	
	<munit:test name="test-resultsapi-filteredresponse" description="Testing /results API when the filter is applied" doc:id="d4e1ce63-85cd-410b-b771-4b2b24574f99">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="data-aggregation-demo-api-main" />
            <munit:enable-flow-source value="get:\results\(searchTerm):data-aggregation-demo-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior >
			<java:new doc:name="Create Helper Class" class="com.deloitte.helperclasses.JsonHelpers" constructor="JsonHelpers()" target="helperClass"/>
			<munit-tools:mock-when doc:name="Mock Database Call for Sources" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute attributeName="doc:name" whereValue="Get Sources" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[Java::invoke('com.deloitte.helperclasses.JsonHelpers', 'getArrayFromJson(String)', vars.helperClass, {arg0: MunitTools::getResourceAsString('scaffolder/mock/get-multiple-sources.json')})]" mediaType="application/java" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock HTTP Call for Source API" doc:id="900fd8d4-a74d-4eba-a1ec-bf88a004b400" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute attributeName="doc:name" whereValue="Get Result from Source API" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload mediaType="application/json" value="#[MunitTools::getResourceAsString('scaffolder/mock/single-result-from-sourceapi.json')]"/>
					<munit-tools:attributes value="#['statusCode':200]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/results/searchTerm">
                <http:headers><![CDATA[#[output applicaton/java
---
{
	"Accept" : "application/json"
}]]]></http:headers>
				<http:query-params ><![CDATA[#[output applicaton/java
---
{
	"detailedResponse" : false
}]]]></http:query-params>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 200" />
            <munit-tools:assert-that expression="#[output application/java ---write(payload, 'application/json') as String]" is="#[MunitTools::equalTo(MunitTools::getResourceAsString('scaffolder/response/get_200_results_{searchterm}_application_json.json'))]" message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" />
        </munit:validation>
	</munit:test>
	
	<munit:test name="test-resultsapi-nosources" description="Testing the /results API for the case when there are no sources in the DB" doc:id="43b5d676-a901-42f5-8c62-f546b734e74d">
        <munit:enable-flow-sources>
            <munit:enable-flow-source value="data-aggregation-demo-api-main" />
            <munit:enable-flow-source value="get:\results\(searchTerm):data-aggregation-demo-api-config" />
        </munit:enable-flow-sources>
        <munit:behavior >
			<java:new doc:name="Create Helper Class" class="com.deloitte.helperclasses.JsonHelpers" constructor="JsonHelpers()" target="helperClass"/>
			<munit-tools:mock-when doc:name="Mock Database Call for Sources" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute attributeName="doc:name" whereValue="Get Sources" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[Java::invoke('com.deloitte.helperclasses.JsonHelpers', 'getArrayFromJson(String)', vars.helperClass, {arg0: MunitTools::getResourceAsString('scaffolder/mock/get-no-sources.json')})]" mediaType="application/java" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
        <munit:execution>
            <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/results/searchTerm">
                <http:headers><![CDATA[#[output applicaton/java
---
{
	"Accept" : "application/json"
}]]]></http:headers>
				<http:response-validator >
					<http:success-status-code-validator values="200,500" />
				</http:response-validator>
            </http:request>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(500)]" message="The HTTP Status code is not correct!" doc:name="Assert That Status Code is 500" />
            <munit-tools:assert-that expression="#[output application/java ---write(payload, 'application/json') as String]" is="#[MunitTools::equalTo(MunitTools::getResourceAsString('scaffolder/response/get_500_results_nosources.json'))]" message="The response payload is not correct!" doc:name="Assert That - Payload is Expected" />
        </munit:validation>
	</munit:test>
</mule>
